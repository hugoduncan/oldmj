#!/usr/bin/env bb
;; -*- mode: clojure -*-

;; bootstrap the mj binary
(require '[clojure.edn :as edn])
(require '[clojure.java.shell :refer [sh]])

(when-not (System/getenv "GRAALVM_HOME")
  (binding [*out* *err*]
    (println "failed")
    (println "Please set GRAALVM_HOME"))
  (System/exit 1))

(println "building tools pom")
(let [res (sh "clojure" "-A:dev"
              "-m" "makejack.tools.pom" "--verbose" "--aliases" ":dev"
              :dir "tools")]
  (println res)
  (when (pos? (:exit res))
    (binding [*out* *err*]
      (println "failed")
      (println (:err res)))
    (System/exit (:exit res))))

(println "building tools jar to get one version")
(let [res (sh "clojure" "-A:dev" "-m"
              "makejack.tools.jar" "--verbose" "--aliases" ":dev"
              :dir "tools")]
  (println (:out res))
  (println (:err res))
  (when (pos? (:exit res))
    (binding [*out* *err*]
      (println "failed")
      (println (:err res)))
    (System/exit (:exit res))))

(println "getting tools version")
(let [project (edn/read-string (slurp "tools/project.edn"))
      version (:version project)]

  (let [res (sh "ls" "-l"
                :dir "tools")]
    (println (:out res))
    (when (pos? (:exit res))
      (binding [*out* *err*]
        (println "failed")
        (println (:err res)))
      (System/exit (:exit res))))

  (let [res (sh "ls" "-l")]
    (println (:out res))
    (when (pos? (:exit res))
      (binding [*out* *err*]
        (println "failed")
        (println (:err res)))
      (System/exit (:exit res))))

  (let [res (sh "ls" "-l" "target"
                :dir "tools")]
    (println (:out res))
    (when (pos? (:exit res))
      (binding [*out* *err*]
        (println "failed")
        (println (:err res)))
      (System/exit (:exit res))))

  (println "installing tools jar")
  (let [res (sh "mvn"
                "org.apache.maven.plugins:maven-install-plugin:3.0.0-M1:install-file"
                (str "-Dfile=target/makejack.tools-" version ".jar")
                "-DgroupId=makejack"
                "-DartifactId=makejack.tools"
                (str "-Dversion=" version)
                "-Dpackaging=jar"
                :dir "tools")]
    (println (:out res))
    (when (pos? (:exit res))
      (binding [*out* *err*]
        (println "failed")
        (println (:err res)))
      (System/exit (:exit res))))


  (println "classpath")
  (let [res (sh "clojure" "-Spath")]
    (println (:out res))
    (println (:err res))
    (when (pos? (:exit res))
      (binding [*out* *err*]
        (println "failed")
        (println (:err res)))
      (System/exit (:exit res))))

  (println "building api pom")
  (let [res (sh "clojure" "-m" "makejack.main" "pom" "--verbose")]
    (println (:out res))
    (println (:err res))
    (when (pos? (:exit res))
      (binding [*out* *err*]
        (println "failed")
        (println (:err res)))
      (System/exit (:exit res))))
  (println "building api jar")
  (let [res (sh "clojure" "-m" "makejack.main" "jar" "--verbose")]
    (println (:out res))
    (println (:err res))
    (when (pos? (:exit res))
      (binding [*out* *err*]
        (println "failed")
        (println (:err res)))
      (System/exit (:exit res))))
  (println "installing api jar")
  (let [res (sh "clojure" "-m" "makejack.main" "install" "--verbose")]
    (println (:out res))
    (println (:err res))
    (when (pos? (:exit res))
      (binding [*out* *err*]
        (println "failed")
        (println (:err res)))
      (System/exit (:exit res))))


  (println "building tools pom")
  (let [res (sh "clojure" "-A:dev"
                "-m" "makejack.tools.pom" "--verbose" "--aliases" ":dev"
                :dir "tools")]
    (println res)
    (when (pos? (:exit res))
      (binding [*out* *err*]
        (println "failed")
        (println (:err res)))
      (System/exit (:exit res))))

  (println "building tools jar without dev alias")
  (let [res (sh "clojure" "-A:dev" "-m"
                "makejack.tools.jar" "--verbose"
                :dir "tools")]
    (println (:out res))
    (println (:err res))
    (when (pos? (:exit res))
      (binding [*out* *err*]
        (println "failed")
        (println (:err res)))
      (System/exit (:exit res))))

  (println "installing tools jar")
  (let [res (sh "mvn"
                "org.apache.maven.plugins:maven-install-plugin:3.0.0-M1:install-file"
                (str "-Dfile=target/makejack.tools-" version ".jar")
                "-DgroupId=makejack"
                "-DartifactId=makejack.tools"
                (str "-Dversion=" version)
                "-Dpackaging=jar"
                :dir "tools")]
    (println (:out res))
    (when (pos? (:exit res))
      (binding [*out* *err*]
        (println "failed")
        (println (:err res)))
      (System/exit (:exit res)))))


(println "classpath")
(let [res (sh "clojure" "-Spath")]
  (println (:out res))
  (println (:err res))
  (when (pos? (:exit res))
    (binding [*out* *err*]
      (println "failed")
      (println (:err res)))
    (System/exit (:exit res))))

(println "generating pom for binary")
(let [res (sh "clojure" "-m" "makejack.main" "--verbose" "pom")]
  (println res)
  (when (pos? (:exit res))
    (binding [*out* *err*]
      (println "failed")
      (println (:err res)))
    (System/exit (:exit res))))


(println "compiling for binary")
(let [res (sh "clojure" "-m" "makejack.main" "--verbose" "compile")]
  (println res)
  (when (pos? (:exit res))
    (binding [*out* *err*]
      (println "failed")
      (println (:err res)))
    (System/exit (:exit res))))

(println "generating uberjar for binary")
(let [res (sh "clojure" "-m" "makejack.main" "--verbose" "uberjar")]
  (println res)
  (when (pos? (:exit res))
    (binding [*out* *err*]
      (println "failed")
      (println (:err res)))
    (System/exit (:exit res))))

(println "generating binary (may take a couple of minutes)")
(let [res (sh "clojure" "-m" "makejack.main" "--verbose" "binary")]
  (println res)
  (when (pos? (:exit res))
    (binding [*out* *err*]
      (println "failed")
      (println (:err res)))
    (System/exit (:exit res))))
