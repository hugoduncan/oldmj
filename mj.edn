#mj {:project #project {:profile :jar} ; helper for install target
     :doc     "Use `mj uberscript` to build an babashka uberscript.
          TODO - make this appear in `mj --help` output"
     :targets
     #merge
     [#default-targets [:pom :clean :jar :uberjar :compile :binary :uberscript
                        :install :deploy]
      {:api-doc
       {:doc     "Generate API documentation from sources."
        :invoker :clojure
        :aliases [:api-docs]
        :deps    {codox {:mvn/version "0.10.6"}}
        :options {:forward-options false}
        :expr    (do (require '[codox.main :as codox]
                              'makejack.doc.api-writer)
                     (codox/generate-docs
                       {:metadata    {:doc/format :markdown}
                        :output-path "site"
                        :source-uri  "https://github.com/hugoduncan/makejack/blob/v{version}/{filepath}#L{line}"
                        :version     #ref [:project :version]
                        :namespaces  [#regex "^makejack\\.api\\."]
                        :writer      'makejack.doc.api-writer/write-docs
                        }))}
       :invoker-doc
       {:doc     "Generate invoker documentation from sources."
        :invoker :clojure
        :aliases [:api-docs]
        :deps    {codox {:mvn/version "0.10.6"}}
        :options {:forward-options false}
        :expr    (do (require '[codox.main :as codox]
                              'makejack.doc.invoker-writer)
                     (codox/generate-docs
                       {:metadata    {:doc/format :markdown}
                        :output-path "site"
                        :source-uri  "https://github.com/hugoduncan/makejack/blob/v{version}/{filepath}#L{line}"
                        :version     #ref [:project :version]
                        :namespaces  [#regex "^makejack\\.invoke\\.[a-z_]+$"]
                        :writer      'makejack.doc.invoker-writer/write-docs
                        }))}
       :tool-doc
       {:doc     "Generate tool documentation from sources."
        :invoker :clojure
        :aliases [:api-docs]
        :deps    {codox {:mvn/version "0.10.6"}}
        :options {:forward-options false
                  :dir             "tools"}
        :expr    (do (require '[codox.main :as codox]
                              'makejack.doc.tool-writer)
                     (codox/generate-docs
                       {:metadata    {:doc/format :markdown}
                        :output-path "../site"
                        :source-uri  "https://github.com/hugoduncan/makejack/blob/v{version}/{filepath}#L{line}"
                        :version     #ref [:project :version]
                        :namespaces  [#regex "^makejack\\.tools\\.[a-z_]+$"]
                        :writer      'makejack.doc.tool-writer/write-docs
                        }))}
       :build      {:doc     "pom, compile, uberjar and binary"
                    :invoker :chain
                    :targets [:pom :compile :uberjar :binary]}
       :build-api  {:doc     "pom, jar and install"
                    :invoker :chain
                    :targets [:pom :jar :install]}
       :site       {:doc     "Build the static site for github pages"
                    :invoker :shell
                    :args    ["hugo"]
                    :options {:out :inherit}}
       :build-site {:doc     "api-doc, invoker-doc, tool-doc and site "
                    :invoker :chain
                    :targets [:api-doc :invoker-doc :tool-doc :site]}
       :test       {:doc     "Run tests"
                    :invoker :clojure
                    :main    kaocha.runner
                    :aliases [:dev :test]
                    :options {:out             :inherit
                              :forward-options false}}
       :version-ns {:doc     "Write the version info namespace"
                    :invoker :clojure
                    :main    makejack.impl.build-version
                    :options {:forward-options false}}
       :submodule  {:invoker :shell
                    :args    ["git" "submodule" "update" "--recursive"]}
       :modules    {:invoker :modules
                    :modules ["tools"]}
       :lint       {:invoker :shell
                    :args    ["clj-kondo" "--lint" "src"]}
       :fmt        {:invoker   :clojure
                    :deps      {cljfmt {:mvn/version "0.6.4"}}
                    :main      cljfmt.main
                    :main-args ["check"
                                "--indents" ".cljfmt/indents.edn"
                                "src"]
                    :options   {:out             :inherit
                                :forward-options false}}}]}
